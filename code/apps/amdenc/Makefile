# Builds the application.

# Cross compiler binary prefix
MAKEFILE_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
ARCH := $(MAKEFILE_DIR)/../../../compiler/bin/x86_64-elf

# Compiler
# TODO add -O2 again
CC := $(ARCH)-gcc
CFLAGS := -std=c1x \
		  -Wall \
		  -Wextra \
		  -Wno-unused-parameter \
		  -pedantic \
		  -ffreestanding \
		  -mno-red-zone \
		  -g

# Assembler
AS := nasm
ASFLAGS := -f elf64 -g -F dwarf

# Linker
LD := $(ARCH)-ld
LDFLAGS := -z max-page-size=0x1000 

# Archiver
AR := $(ARCH)-ar
ARFLAGS := 

# Find source files
SOURCES := $(shell find ./ -name "*.c" -or -path "./*" -name "*.s" -type f)

# Object files
OBJECTS := $(addsuffix .o, $(SOURCES))

# Dependency files (auto-generated by compiler)
DEPENDENCIES := $(shell find -name "*.d")

# Builds all targets.
.PHONY: all
all: app

# Removes all generated files.
.PHONY: clean
clean:
	$(RM) $(DEPENDENCIES)
	$(RM) amdenc.elf $(OBJECTS)

# Use compiler-generated dependency files
include $(DEPENDENCIES)

# Main targets
.PHONY: app
app: $(OBJECTS)
	$(LD) -o amdenc.elf $(OBJECTS) $(LDFLAGS) -L../../ -l kernel -Tlinker.lds
	
# Rules for compilation
%.c.o: %.c
	$(CC) $(CFLAGS) -I../../lib/ -mcmodel=small -MD -MP -MT $@ -MF $(addsuffix .d,$(basename $@)) -c -o $@ $<
%.s.o: %.s
	$(AS) $(ASFLAGS) -o $@ $<
